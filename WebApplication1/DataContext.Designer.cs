//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22.12.2022 11:03:26
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.Extensions.Configuration;

namespace ErpSystemDbContext
{

    [DatabaseAttribute(Name = "erp_system_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class ErpSystemDbDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ErpSystemDbDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCustomer(Customer instance);
        partial void UpdateCustomer(Customer instance);
        partial void DeleteCustomer(Customer instance);
        partial void InsertCustomerBill(CustomerBill instance);
        partial void UpdateCustomerBill(CustomerBill instance);
        partial void DeleteCustomerBill(CustomerBill instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public ErpSystemDbDataContext() :
        base(GetConnectionString("ErpSystemDbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public ErpSystemDbDataContext(MappingSource mappingSource) :
        base(GetConnectionString("ErpSystemDbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        public ErpSystemDbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpSystemDbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpSystemDbDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpSystemDbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Customer> Customers
        {
            get
            {
                return this.GetTable<Customer>();
            }
        }

        public Devart.Data.Linq.Table<CustomerBill> CustomerBills
        {
            get
            {
                return this.GetTable<CustomerBill>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace ErpSystemDbContext
{

    /// <summary>
    /// There are no comments for ErpSystemDbContext.Customer in the schema.
    /// </summary>
    [Table(Name = @"erp_system_db.customer")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CustomerNr;

        private string _CompanyName;

        private string _Surname;

        private string _Lastname;

        private System.DateTime? _Dob;

        private string _Street;

        private string _Nr;

        private string _Postcode;

        private string _Country;

        private string _Cellphone;

        private string _Landlinephone;

        private string _Note;

        private string _Email;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerNrChanging(int value);
        partial void OnCustomerNrChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnDobChanging(System.DateTime? value);
        partial void OnDobChanged();
        partial void OnStreetChanging(string value);
        partial void OnStreetChanged();
        partial void OnNrChanging(string value);
        partial void OnNrChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCellphoneChanging(string value);
        partial void OnCellphoneChanged();
        partial void OnLandlinephoneChanging(string value);
        partial void OnLandlinephoneChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        #endregion

        public Customer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CustomerNr in the schema.
        /// </summary>
        [Column(Storage = "_CustomerNr", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerNr
        {
            get
            {
                return this._CustomerNr;
            }
            set
            {
                if (this._CustomerNr != value)
                {
                    this.OnCustomerNrChanging(value);
                    this.SendPropertyChanging("CustomerNr");
                    this._CustomerNr = value;
                    this.SendPropertyChanged("CustomerNr");
                    this.OnCustomerNrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Storage = "_CompanyName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging("CompanyName");
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Surname in the schema.
        /// </summary>
        [Column(Storage = "_Surname", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Surname
        {
            get
            {
                return this._Surname;
            }
            set
            {
                if (this._Surname != value)
                {
                    this.OnSurnameChanging(value);
                    this.SendPropertyChanging("Surname");
                    this._Surname = value;
                    this.SendPropertyChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Storage = "_Lastname", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging("Lastname");
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dob in the schema.
        /// </summary>
        [Column(Storage = "_Dob", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Dob
        {
            get
            {
                return this._Dob;
            }
            set
            {
                if (this._Dob != value)
                {
                    this.OnDobChanging(value);
                    this.SendPropertyChanging("Dob");
                    this._Dob = value;
                    this.SendPropertyChanged("Dob");
                    this.OnDobChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Street in the schema.
        /// </summary>
        [Column(Storage = "_Street", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Street
        {
            get
            {
                return this._Street;
            }
            set
            {
                if (this._Street != value)
                {
                    this.OnStreetChanging(value);
                    this.SendPropertyChanging("Street");
                    this._Street = value;
                    this.SendPropertyChanged("Street");
                    this.OnStreetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nr in the schema.
        /// </summary>
        [Column(Storage = "_Nr", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nr
        {
            get
            {
                return this._Nr;
            }
            set
            {
                if (this._Nr != value)
                {
                    this.OnNrChanging(value);
                    this.SendPropertyChanging("Nr");
                    this._Nr = value;
                    this.SendPropertyChanged("Nr");
                    this.OnNrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Storage = "_Postcode", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging("Postcode");
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cellphone in the schema.
        /// </summary>
        [Column(Storage = "_Cellphone", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cellphone
        {
            get
            {
                return this._Cellphone;
            }
            set
            {
                if (this._Cellphone != value)
                {
                    this.OnCellphoneChanging(value);
                    this.SendPropertyChanging("Cellphone");
                    this._Cellphone = value;
                    this.SendPropertyChanged("Cellphone");
                    this.OnCellphoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Landlinephone in the schema.
        /// </summary>
        [Column(Storage = "_Landlinephone", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Landlinephone
        {
            get
            {
                return this._Landlinephone;
            }
            set
            {
                if (this._Landlinephone != value)
                {
                    this.OnLandlinephoneChanging(value);
                    this.SendPropertyChanging("Landlinephone");
                    this._Landlinephone = value;
                    this.SendPropertyChanged("Landlinephone");
                    this.OnLandlinephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Storage = "_Note", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging("Note");
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ErpSystemDbContext.CustomerBill in the schema.
    /// </summary>
    [Table(Name = @"erp_system_db.customer_bill")]
    public partial class CustomerBill : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private decimal _Amount;

        private string _CompanyName;

        private string _ContactPerson;

        private string _Currency;

        private int _CustomerBillNr;

        private string _CustomerPostcode;

        private string _CustomerStreet;

        private System.DateTime _IssuedOn;

        private System.DateTime _PaymentDate;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactPersonChanging(string value);
        partial void OnContactPersonChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnCustomerBillNrChanging(int value);
        partial void OnCustomerBillNrChanged();
        partial void OnCustomerPostcodeChanging(string value);
        partial void OnCustomerPostcodeChanged();
        partial void OnCustomerStreetChanging(string value);
        partial void OnCustomerStreetChanged();
        partial void OnIssuedOnChanging(System.DateTime value);
        partial void OnIssuedOnChanged();
        partial void OnPaymentDateChanging(System.DateTime value);
        partial void OnPaymentDateChanged();
        #endregion

        public CustomerBill()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging("Amount");
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Name = @"company_name", Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging("CompanyName");
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactPerson in the schema.
        /// </summary>
        [Column(Name = @"contact_person", Storage = "_ContactPerson", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ContactPerson
        {
            get
            {
                return this._ContactPerson;
            }
            set
            {
                if (this._ContactPerson != value)
                {
                    this.OnContactPersonChanging(value);
                    this.SendPropertyChanging("ContactPerson");
                    this._ContactPerson = value;
                    this.SendPropertyChanged("ContactPerson");
                    this.OnContactPersonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [Column(Name = @"currency", Storage = "_Currency", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Currency
        {
            get
            {
                return this._Currency;
            }
            set
            {
                if (this._Currency != value)
                {
                    this.OnCurrencyChanging(value);
                    this.SendPropertyChanging("Currency");
                    this._Currency = value;
                    this.SendPropertyChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerBillNr in the schema.
        /// </summary>
        [Column(Name = @"customer_bill_nr", Storage = "_CustomerBillNr", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CustomerBillNr
        {
            get
            {
                return this._CustomerBillNr;
            }
            set
            {
                if (this._CustomerBillNr != value)
                {
                    this.OnCustomerBillNrChanging(value);
                    this.SendPropertyChanging("CustomerBillNr");
                    this._CustomerBillNr = value;
                    this.SendPropertyChanged("CustomerBillNr");
                    this.OnCustomerBillNrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerPostcode in the schema.
        /// </summary>
        [Column(Name = @"customer_postcode", Storage = "_CustomerPostcode", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerPostcode
        {
            get
            {
                return this._CustomerPostcode;
            }
            set
            {
                if (this._CustomerPostcode != value)
                {
                    this.OnCustomerPostcodeChanging(value);
                    this.SendPropertyChanging("CustomerPostcode");
                    this._CustomerPostcode = value;
                    this.SendPropertyChanged("CustomerPostcode");
                    this.OnCustomerPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerStreet in the schema.
        /// </summary>
        [Column(Name = @"customer_street", Storage = "_CustomerStreet", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerStreet
        {
            get
            {
                return this._CustomerStreet;
            }
            set
            {
                if (this._CustomerStreet != value)
                {
                    this.OnCustomerStreetChanging(value);
                    this.SendPropertyChanging("CustomerStreet");
                    this._CustomerStreet = value;
                    this.SendPropertyChanged("CustomerStreet");
                    this.OnCustomerStreetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IssuedOn in the schema.
        /// </summary>
        [Column(Name = @"issued_on", Storage = "_IssuedOn", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime IssuedOn
        {
            get
            {
                return this._IssuedOn;
            }
            set
            {
                if (this._IssuedOn != value)
                {
                    this.OnIssuedOnChanging(value);
                    this.SendPropertyChanging("IssuedOn");
                    this._IssuedOn = value;
                    this.SendPropertyChanged("IssuedOn");
                    this.OnIssuedOnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentDate in the schema.
        /// </summary>
        [Column(Name = @"payment_date", Storage = "_PaymentDate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging("PaymentDate");
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ErpSystemDbContext.Product in the schema.
    /// </summary>
    [Table(Name = @"erp_system_db.product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Description;

        private string _ProductName;

        private int _ProductNr;

        private string _ProductSize;

        private decimal _PurchasingPricePerUnit;

        private string _SellingPricePerUnit;

        private string _Unit;

        private int _UnitsAvailable;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnProductNrChanging(int value);
        partial void OnProductNrChanged();
        partial void OnProductSizeChanging(string value);
        partial void OnProductSizeChanged();
        partial void OnPurchasingPricePerUnitChanging(decimal value);
        partial void OnPurchasingPricePerUnitChanged();
        partial void OnSellingPricePerUnitChanging(string value);
        partial void OnSellingPricePerUnitChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnUnitsAvailableChanging(int value);
        partial void OnUnitsAvailableChanged();
        #endregion

        public Product()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Name = @"product_name", Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductNr in the schema.
        /// </summary>
        [Column(Name = @"product_nr", Storage = "_ProductNr", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductNr
        {
            get
            {
                return this._ProductNr;
            }
            set
            {
                if (this._ProductNr != value)
                {
                    this.OnProductNrChanging(value);
                    this.SendPropertyChanging("ProductNr");
                    this._ProductNr = value;
                    this.SendPropertyChanged("ProductNr");
                    this.OnProductNrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductSize in the schema.
        /// </summary>
        [Column(Name = @"product_size", Storage = "_ProductSize", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductSize
        {
            get
            {
                return this._ProductSize;
            }
            set
            {
                if (this._ProductSize != value)
                {
                    this.OnProductSizeChanging(value);
                    this.SendPropertyChanging("ProductSize");
                    this._ProductSize = value;
                    this.SendPropertyChanged("ProductSize");
                    this.OnProductSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchasingPricePerUnit in the schema.
        /// </summary>
        [Column(Name = @"purchasing_price_per_unit", Storage = "_PurchasingPricePerUnit", CanBeNull = false, DbType = "DECIMAL(4,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal PurchasingPricePerUnit
        {
            get
            {
                return this._PurchasingPricePerUnit;
            }
            set
            {
                if (this._PurchasingPricePerUnit != value)
                {
                    this.OnPurchasingPricePerUnitChanging(value);
                    this.SendPropertyChanging("PurchasingPricePerUnit");
                    this._PurchasingPricePerUnit = value;
                    this.SendPropertyChanged("PurchasingPricePerUnit");
                    this.OnPurchasingPricePerUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SellingPricePerUnit in the schema.
        /// </summary>
        [Column(Name = @"selling_price_per_unit", Storage = "_SellingPricePerUnit", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SellingPricePerUnit
        {
            get
            {
                return this._SellingPricePerUnit;
            }
            set
            {
                if (this._SellingPricePerUnit != value)
                {
                    this.OnSellingPricePerUnitChanging(value);
                    this.SendPropertyChanging("SellingPricePerUnit");
                    this._SellingPricePerUnit = value;
                    this.SendPropertyChanged("SellingPricePerUnit");
                    this.OnSellingPricePerUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitsAvailable in the schema.
        /// </summary>
        [Column(Name = @"units_available", Storage = "_UnitsAvailable", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UnitsAvailable
        {
            get
            {
                return this._UnitsAvailable;
            }
            set
            {
                if (this._UnitsAvailable != value)
                {
                    this.OnUnitsAvailableChanging(value);
                    this.SendPropertyChanging("UnitsAvailable");
                    this._UnitsAvailable = value;
                    this.SendPropertyChanged("UnitsAvailable");
                    this.OnUnitsAvailableChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ErpSystemDbContext.User in the schema.
    /// </summary>
    [Table(Name = @"erp_system_db.user")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private sbyte _UserId;

        private string _UserName;

        private string _UserPassword;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(sbyte value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserPasswordChanging(string value);
        partial void OnUserPasswordChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "TINYINT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public sbyte UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"user_name", Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserPassword in the schema.
        /// </summary>
        [Column(Name = @"user_password", Storage = "_UserPassword", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserPassword
        {
            get
            {
                return this._UserPassword;
            }
            set
            {
                if (this._UserPassword != value)
                {
                    this.OnUserPasswordChanging(value);
                    this.SendPropertyChanging("UserPassword");
                    this._UserPassword = value;
                    this.SendPropertyChanged("UserPassword");
                    this.OnUserPasswordChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
